#!/usr/bin/env python3
"""Calculate factors of composite numbers using Pollard's Rho algorithm."""

import math
import random
import sys


def modular_pow(base: int, exponent: int, modulus: int) -> int:
    """Returns (base^exponent) % modulus."""
    result = 1
    while (exponent > 0):
        # if y is odd, multiply base with result
        if (exponent & 1):
            result = (result * base) % modulus

        # exponent = exponent // 2
        exponent = exponent >> 1

        # base = base * base
        base = (base * base) % modulus

    return result


def pollard_rho(n: int) -> int:
    """Returns prime divisor for n."""
    # no prime divisor for 1
    if (n == 1):
        return n

    # even number means one of the divisors is 2
    if (n % 2 == 0):
        return 2

    # we will pick from the range [2, N)
    x = (random.randint(0, 2) % (n - 2))
    y = x

    # the constant in f(x).
    # Algorithm can be re-run with a different c
    # if it throws failure for a composite.
    c = (random.randint(0, 1) % (n - 1))

    # Initialize candidate divisor (or result)
    d = 1

    # until the prime factor isn't obtained.
    # If n is prime, return n
    while (d == 1):

        # Tortoise Move: x(i+1) = f(x(i))
        x = (modular_pow(x, 2, n) + c + n) % n

        # Hare Move: y(i+1) = f(f(y(i)))
        y = (modular_pow(y, 2, n) + c + n) % n
        y = (modular_pow(y, 2, n) + c + n) % n

        # check gcd of |x-y| and n
        d = math.gcd(abs(x - y), n)

        # retry if the algorithm fails to find prime factor
        # with chosen x and c
        if (d == n):
            return pollard_rho(n)

    return d


def main(file_path: str) -> None:
    """Reads numbers from a file and factors them."""
    with open(file_path) as f:
        for line in f:
            num = int(line)
            factor = pollard_rho(num)
            print(f"{num}={num // factor}*{factor}", flush=True)


if __name__ == "__main__":
    main(sys.argv[1])
